# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: async_worker/async_ffmpeg_worker.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from worker import ffmpeg_worker_pb2 as worker_dot_ffmpeg__worker__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='async_worker/async_ffmpeg_worker.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n&async_worker/async_ffmpeg_worker.proto\x1a\x1aworker/ffmpeg_worker.proto\"5\n\x12\x41syncFFmpegRequest\x12\x1f\n\x07request\x18\x01 \x01(\x0b\x32\x0e.FFmpegRequest\"(\n\x13\x41syncFFmpegResponse\x12\x11\n\ttask_name\x18\x01 \x01(\t2G\n\x0b\x41syncFFmpeg\x12\x38\n\ttranscode\x12\x13.AsyncFFmpegRequest\x1a\x14.AsyncFFmpegResponse\"\x00\x62\x06proto3'
  ,
  dependencies=[worker_dot_ffmpeg__worker__pb2.DESCRIPTOR,])




_ASYNCFFMPEGREQUEST = _descriptor.Descriptor(
  name='AsyncFFmpegRequest',
  full_name='AsyncFFmpegRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='AsyncFFmpegRequest.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=70,
  serialized_end=123,
)


_ASYNCFFMPEGRESPONSE = _descriptor.Descriptor(
  name='AsyncFFmpegResponse',
  full_name='AsyncFFmpegResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_name', full_name='AsyncFFmpegResponse.task_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=125,
  serialized_end=165,
)

_ASYNCFFMPEGREQUEST.fields_by_name['request'].message_type = worker_dot_ffmpeg__worker__pb2._FFMPEGREQUEST
DESCRIPTOR.message_types_by_name['AsyncFFmpegRequest'] = _ASYNCFFMPEGREQUEST
DESCRIPTOR.message_types_by_name['AsyncFFmpegResponse'] = _ASYNCFFMPEGRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

AsyncFFmpegRequest = _reflection.GeneratedProtocolMessageType('AsyncFFmpegRequest', (_message.Message,), {
  'DESCRIPTOR' : _ASYNCFFMPEGREQUEST,
  '__module__' : 'async_worker.async_ffmpeg_worker_pb2'
  # @@protoc_insertion_point(class_scope:AsyncFFmpegRequest)
  })
_sym_db.RegisterMessage(AsyncFFmpegRequest)

AsyncFFmpegResponse = _reflection.GeneratedProtocolMessageType('AsyncFFmpegResponse', (_message.Message,), {
  'DESCRIPTOR' : _ASYNCFFMPEGRESPONSE,
  '__module__' : 'async_worker.async_ffmpeg_worker_pb2'
  # @@protoc_insertion_point(class_scope:AsyncFFmpegResponse)
  })
_sym_db.RegisterMessage(AsyncFFmpegResponse)



_ASYNCFFMPEG = _descriptor.ServiceDescriptor(
  name='AsyncFFmpeg',
  full_name='AsyncFFmpeg',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=167,
  serialized_end=238,
  methods=[
  _descriptor.MethodDescriptor(
    name='transcode',
    full_name='AsyncFFmpeg.transcode',
    index=0,
    containing_service=None,
    input_type=_ASYNCFFMPEGREQUEST,
    output_type=_ASYNCFFMPEGRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_ASYNCFFMPEG)

DESCRIPTOR.services_by_name['AsyncFFmpeg'] = _ASYNCFFMPEG

# @@protoc_insertion_point(module_scope)
